#!/usr/bin/python3
import xlsxwriter
import os
from os import system
import pandas as pd
import argparse
import re

#Global Variables
spreadsheetName = "test2.xlsx"
# spreadsheetName = "Compliance_Windows_2010_Feb29_2024.xlsx"

spreadsheetloc = str(os.getcwd()) + "/" + spreadsheetName
workbook = xlsxwriter.Workbook(spreadsheetloc)


### Create raw report template ###

# Full black cells:
blackcell = workbook.add_format()
blackcell.set_pattern(1)
blackcell.set_bg_color('black')

format_silver = workbook.add_format({'bg_color': '#C0D0D0',
                                    'font_name': 'Calibri',
                                    'font_size': 11,
                                    'bold': True,
                                    'align': 'top',
                                    'text_wrap': True })
format_orange = workbook.add_format({'bg_color': 'orange',
                                    'font_name': 'Calibri',
                                    'font_size': 11,
                                    'bold': True,
                                    'align': 'top',
                                    'text_wrap': True })
format_yellow = workbook.add_format({'bg_color': 'yellow',
                                    'font_name': 'Calibri',
                                    'font_size': 11,
                                    'bold': True,
                                    'align': 'top',
                                    'text_wrap': True })
format_red = workbook.add_format({'bg_color': 'red',
                                    'font_name': 'Calibri',
                                    'font_size': 11,
                                    'bold': True,
                                    'align': 'top',
                                    'text_wrap': True })
#used for header row and comments column
format_gray = workbook.add_format({'bg_color': 'gray',
                                    'font_name': 'Calibri',
                                    'font_size': 11,
                                    'bold': True,
                                    'align': 'Center',
                                    'text_wrap': True })
arialbold = workbook.add_format({
                                    'font_name': 'Calibri',
                                    'font_size': 11,
                                    'bold': True,
                                    'align': 'top',
                                    'text_wrap': True })

# Used for IP, Plugin, Risk, Details, etc:
normaltext = workbook.add_format({
                                    'font_name': 'Calibri',
                                    'font_size': 11,
                                    'bold': False,
                                    'align': 'top',
                                    'text_wrap': True })
# Used for "Certifier Comments:" and "Recommendation:":
normalBOLDtext = workbook.add_format({
                                    'font_name': 'Calibri',
                                    'font_size': 11,
                                    'bold': True,
                                    'align': 'top',
                                    'text_wrap': True })

columnHeaderFormatting = [
    ['A:A', 11, 'A1','IP(s)'],
    ['B:B', 15, 'B1', 'Source/PluginID'],
    ['C:C', 9, 'C1', 'Risk Level'],
    ['D:D', 45, 'D1', 'Finding Name'],
    ['E:E', 45, 'E1', 'Finding Details'],
    ['F:F', 45, 'F1', 'Recommendation'],
    ['G:G', 48, 'G1', 'Current Settings'],

    ['H:H', 5, 'H1', ''],
    ['I:I', 18, 'I1', 'Policy Requirements'],
    ['J:J', 30, 'J1', 'CVE(s)'],
    ['K:K', 45, 'K1', 'Nessus (Full Output)'],
    ['L:L', 19, 'L1', 'Comments' ]

    
]
# TODO:
#This version has a bug when database schema for column nessus_host_id is not unique, it will add those IP's as findings incorrectly
# Add Enclave/Plane option
# Add Finding added by option
def combine_csvs(dir_path, cms):
    print(dir_path)
    if os.path.isfile('output.csv'):
        os.remove('output.csv')
    # TODO: Maybe set "SC detected" here and new list if SC is detected, which would change cms...
    df = pd.DataFrame()
    file_path = []
    for i, file_name in enumerate(os.listdir(dir_path)):
        if file_name.endswith('csv'):
            file_path.append(os.path.join(dir_path, file_name))

    df = pd.concat(map(pd.read_csv, file_path))
    df_filtered = pd.DataFrame(df)

    df_filtered.to_csv('output.csv', index=False)
    get_vulnerability('output.csv')

def combine_csvsV2(dir_path, cms):
    if os.path.isfile('output.csv'):
        os.remove('output.csv')
    if os.path.isfile('output.txt'):
        os.remove('output.txt')
    # TODO: Maybe set "SC detected" here and new list if SC is detected, which would change cms...
    df = pd.DataFrame()
    file_csv_path = []
    file_txt_path = []
    for i, file_name in enumerate(os.listdir(dir_path)):
        if file_name.endswith('csv'):
            file_csv_path.append(os.path.join(dir_path, file_name))
    for i, file_name in enumerate(os.listdir(dir_path)):
        if file_name.endswith('txt'):
            file_txt_path.append(os.path.join(dir_path, file_name))
    print("Vulnerability File Path")
    index = 0
    worksheets = workbook_format(len(file_csv_path))

    for item in file_csv_path:
        print("-----Reading in: ", item)
        df = pd.read_csv(item)
        df.to_csv('output.csv', mode='a', index=False, header=True)
        get_vulnerability('output.csv', dir_path, index, worksheets)
        if os.path.isfile('output.csv'):
            os.remove('output.csv')
        index += 1
    workbook.close()

def workbook_format(file_list_length):
    # Create xlxs document:

    worksheetList = []
    index = 0
    while index < file_list_length:
        if(index == 0):
            worksheet = workbook.add_worksheet("sheet" + str(index))
            worksheetList.append(worksheet)
        if(index == 1):
            worksheet2 = workbook.add_worksheet("sheet" + str(index))
            worksheetList.append(worksheet2)
        if(index == 2):
            worksheet3 = workbook.add_worksheet("sheet" + str(index))
            worksheetList.append(worksheet3)
        if(index == 3):
            worksheet4 = workbook.add_worksheet("sheet" + str(index))
            worksheetList.append(worksheet4)
        if(index == 4):
            print("Error: this program only handles 4 files at a time.")
        index +=1
    
    #Variables
    df_sorted = pd.DataFrame()

    # POAM ID was a wokey cell, made a specific setting for it:
    aCell = arialbold
    aCell.set_align('center')
    # Writing default items (POAM, IPs, etc):
    j = 0

    while j < file_list_length:
        for index in range(len(columnHeaderFormatting)):
            worksheetList[j].set_column(columnHeaderFormatting[index][0], columnHeaderFormatting[index][1], format_gray)
            worksheetList[j].write(columnHeaderFormatting[index][2], columnHeaderFormatting[index][3], format_silver)
        j += 1
    return worksheetList

def worksheet_writer(worksheets, file_index, row, testcount):
    testcount = testcount + 1
    # betterdes = str(row['Description']).split('\n')[0]

    #seperate out data
    # try:
    #     Vuln_ID_string = str(row['Description']).split("Vuln-ID|",1)[1].split("Policy")[0]

    # except:
    #     Vuln_ID_string = "NA"

    try:
        plugin_description = str(row['Description'])
    except:
        plugin_description = "NA"

    try:
        Solution_Val_string = str(row['Solution'])
    except:
        Solution_Val_string = "NA"

    try:
        Actual_Val_string = str(row['Plugin Output'])
    except:
        Actual_Val_string = "NA"
    try:
        if("Fixed version" in str(row['Plugin Output'])):
            Policy_Val_string = "Fixed version" + str(row['Plugin Output']).split("Fixed version",1)[1]
        else:
            Policy_Val_string = "Should be" + str(row['Plugin Output']).split("Should be",1)[1]
    except:
        Policy_Val_string = "NA"

    try:
        Finding_Description_string = str(row['Plugin Output'])
    except:
        Finding_Description_string = "NA"

    if(str(row["CVE"]) == 'nan'):
        CVE_description = "NA"
    else: 
        try:
            CVE_description = str(row["CVE"])
        except:
            CVE_description = "NA"
    # try:
    #     STIG_ref_string = str(row['Description']).split("/zip/",1)[1].split(".zip")[0] 
    # except:
    #     STIG_ref_string = "NA"            


        
    editedhosts = str(row['IP Address']).replace(',','\n')


    #write to Excel doc
    worksheets[file_index].write('A' + str(testcount), editedhosts, normaltext)
    worksheets[file_index].write('B' + str(testcount), "Nessus PluginID="+str(row['Plugin']), normaltext)
    worksheets[file_index].write('C' + str(testcount), str(row['Severity']), normaltext)
    worksheets[file_index].write('D' + str(testcount), str(row['Plugin Name']), normaltext)
    worksheets[file_index].write('E' + str(testcount), plugin_description, normaltext)
    worksheets[file_index].write_rich_string('F' + str(testcount), 
        normalBOLDtext, "Recommendation:", normaltext, Solution_Val_string, normalBOLDtext)

    if len(Actual_Val_string) > 250:

        worksheets[file_index].write_rich_string('G' + str(testcount),  
        normaltext, Actual_Val_string[:250] + "... Please refer to Nessus (Full Output) column.", normalBOLDtext,
         "\n\n\n\n\n\nDISCLAIMER: This is an example output, please refer to Nessus Security Center for Actual Value information”\n", normalBOLDtext)
    else:
        worksheets[file_index].write_rich_string('G' + str(testcount),  
        normaltext, Actual_Val_string, normalBOLDtext,
         "\n\n\n\n\n\nDISCLAIMER: This is an example output, please refer to Nessus Security Center for Actual Value information”\n", normalBOLDtext)
    worksheets[file_index].write('H' + str(testcount), 5.14, blackcell)

    worksheets[file_index].write('I' + str(testcount), Policy_Val_string, normaltext )

    worksheets[file_index].write('J' + str(testcount), CVE_description, normaltext)
    # worksheets[file_index].write('J' + str(testcount), Vuln_ID_string, normaltext )
    # worksheets[file_index].write_rich_string('K' + str(testcount), normalBOLDtext, "NA")
    worksheets[file_index].write_rich_string('K' + str(testcount),normaltext, str(row['Description'])+"\n",normaltext,str(row['Plugin Output'])+"\n", normaltext )
    return testcount


def get_vulnerability(file, dir_path, file_index, worksheets):
    # Create xlxs document:
    # spreadsheetName = "SAR.for.travis.vulnerabilityV2.xlsx"
    # spreadsheetloc = str(os.getcwd()) + "/" + spreadsheetName
    # workbook = xlsxwriter.Workbook(spreadsheetloc)
    # worksheet = workbook.add_worksheet()
    ### Create raw report template ###
    # Full black cells:
    # blackcell = workbook.add_format()
    # blackcell.set_pattern(1)
    # blackcell.set_bg_color('black')
    # # Used for first row:
    # arialbold = workbook.add_format()
    # arialbold.set_font_name('Calibri')
    # arialbold.set_font_size(11)
    # arialbold.set_bold(True)
    # arialbold.set_align('bottom')
    # arialbold.set_text_wrap()
    # # Used for IP, Plugin, Risk, Details, etc:
    # normaltext = workbook.add_format()
    # normaltext.set_font_name('Calibri')
    # normaltext.set_font_size(11)
    # normaltext.set_bold(False)
    # normaltext.set_align('top')
    # normaltext.set_align('vleft')
    # normaltext.set_text_wrap()
    # # Used for "Certifier Comments:" and "Recommendation:":
    # normalBOLDtext = workbook.add_format()
    # normalBOLDtext.set_font_name('Calibri')
    # normalBOLDtext.set_font_size(11)
    # normalBOLDtext.set_bold(True)
    # normalBOLDtext.set_align('top')
    # normalBOLDtext.set_align('left')
    # normalBOLDtext.set_text_wrap()
    # # Sets specific heights of columns (first line below is for ROW 1):
    # worksheet.set_column('A:A', 10.86, arialbold)
    # worksheet.set_column('B:B', 12.14, arialbold)
    # # POAM ID was a wokey cell, made a specific setting for it:
    # aCell = arialbold
    # aCell.set_align('center')
    # # Writing default items (POAM, IPs, etc):
    # worksheet.write('A1', 'POA&M ID', aCell)
    # worksheet.write('B1', 'IP(s)', arialbold)
    # worksheet.set_column('C:C', 10.86, arialbold)
    # worksheet.write('C1', 'Source /PluginID', arialbold)
    # worksheet.set_column('D:D', 10.86, arialbold)
    # worksheet.set_column('E:E', 44.86, arialbold)
    # worksheet.write('D1', 'Risk Level', arialbold)
    # worksheet.write('E1', 'Finding Name', arialbold)
    # worksheet.set_column('F:F', 32.43, arialbold)
    # worksheet.write('F1', 'Finding Details', arialbold)
    # worksheet.set_column('G:G', 48.29, normaltext)
    # worksheet.write('G1', 'Certifier Comments & Recommendation', arialbold)
    # worksheet.set_column('I:I', 10.86, arialbold)
    # worksheet.write('I1', 'Enclave/Plane', arialbold)
    # worksheet.set_column('J:J', 22.86, arialbold)
    # worksheet.write('J1', 'Fidning added by', arialbold)
    # worksheet.set_column('K:K', 19.14, arialbold)
    # worksheet.write('K1', 'Mitigated Onsite?', arialbold)
    # # Black Cells
    # worksheet.set_column('H:H', 5.14, arialbold)
    ########## pandas stuff - actual sorting: #########
    df = pd.read_csv(str(file))
    # This is set for Nessus Pro Vulerabilities (Critical, High, Medium, Low)
    print("DF------------------------------\n", df)
    filtered_Critical_items = df[df['Severity'] == 'Critical']
    filtered_High_items = (df[df['Severity'] == 'High'])
    filtered_Medium_items = (df[df['Severity'] == 'Medium'])
    filtered_Low_items = (df[df['Severity'] == 'Low'])
    failedItems = pd.concat([filtered_Critical_items, filtered_High_items, filtered_Medium_items, filtered_Low_items])
    failedItems['DescriptionGroup'] = failedItems['Plugin Output']
    try:
        failedItems['IP Address'] = failedItems.groupby('Plugin')['IP Address'].transform(lambda x: ','.join(x.unique()))

    except:
        print(f"Failed to parse file: {str(file)}")

    failedItems = failedItems.drop_duplicates(subset='Plugin')
    custom_dict = {'Critical': 0, 'High': 1, 'Medium': 2, 'Low': 3}
    sorteditems = failedItems.sort_values(by=['Severity'], key=lambda x: x.map(custom_dict))

    testcount = 1
    for index, row in sorteditems.iterrows():
    #################################
        testcount = worksheet_writer(worksheets, file_index, row, testcount)

        # editedhosts = row['IP Address'].replace(',','\n')
        # worksheet.write('B' + str(testcount), editedhosts, normaltext)
        # worksheet.write('C' + str(testcount), "Nessus PluginID="+str(row['Plugin']), normaltext)
        # #fix this to not grab none
        # worksheet.write('D' + str(testcount), str(row['Severity']), normaltext)
        # worksheet.write('E' + str(testcount), str(row['Plugin Name']), normaltext)
        # worksheet.write('F' + str(testcount), str(row['Plugin Output']), normaltext)
        # worksheet.write('G' + str(testcount), '', normaltext)
        # worksheet.write_rich_string('G' + str(testcount), normalBOLDtext, 'Certifier Comments:', normaltext, "\nNone", normalBOLDtext, "\nRecommendation:\n", normaltext, "-------")
        # worksheet.write('A' + str(testcount), '', blackcell)
        # worksheet.write('H' + str(testcount), 5.14, blackcell)

parser = argparse.ArgumentParser(description='Autotravis for vulnerability using CSVs')
parser.add_argument('-d', '--dir', required=True, help='Please specify the directory with the csv files with -d')
args = parser.parse_args()
filepath = args.dir
### Only send columns you want to combine_csvs() - change if needed
### TODO: columns are set for Nessus Pro, not Security Center, SC has different names for most items below
columns = ['Plugin ID', 'Severity', 'Plugin Output', 'Solution', 'Name', 'Host']
combine_csvsV2(filepath, columns)
print("Completed - XLSX Report ->", spreadsheetName)


